# Simple user commands
# Written on 9/7/2024 (Septiembre de Nueve, dos mil vientecuarto) -> September 9th, 2024

# I recommend you not modify this file.. or any file
#                                        unless there's any sort of issue. (contact me)

# Made with <3 by Suno

# --> libs <--

import discord
import requests
from discord.ext import commands

# --> constants <--
host = "https://weao.xyz/api"
page = 0

def pullAPI(endpoint):
    pull = requests.get(
        url=f"{host}/{endpoint}",
    )
    return pull.json()

# --> main module <--
class user(commands.Cog):
    def __init__(self, app: commands.Bot):
        self.app = app

    # --> commands <--
    @commands.hybrid_command(name="version", description="Returns the latest Roblox version, and upload date.", aliases=["ver", "roblox-ver", "rver", "rover"])
    @commands.cooldown(1, 2.0, commands.BucketType.user)
    async def version(self, CTX: commands.Context):
        data = pullAPI("versions/current")

        embed = discord.Embed(description="### Roblox Information\n**→** ‎ Latest version information from Roblox.", color=0x302c34)
        embed.add_field(name="Windows", value=f"* **Version**: {data.get("Windows")}\n* **Upload Date**: {data.get("WindowsDate").split(",")[0]}", inline=True)
        embed.add_field(name="MacOS", value=f"* **Version**: {data.get("Mac")}\n* **Upload Date**: {data.get("MacDate").split(",")[0]}")
        embed.set_author(name="View source-code over on GitHub", icon_url="https://www.pinclipart.com/picdir/big/35-354768_circle-clipart.png", url="https://github.com/mr-suno/Exploit-Status")
       
        if isinstance(CTX, commands.Context):
            await CTX.send(embed=embed)
        elif isinstance(CTX, discord.Interaction):
            await CTX.response.send_message(embed=embed)

    @version.error
    async def version_error(self, CTX: commands.Context, error):
        pass

    @commands.hybrid_command(name="status", description="Get the status of every mainstream paid & free executor")
    @commands.cooldown(1, 2.0, commands.BucketType.user)
    async def status(self, CTX: commands.Context):
        data = pullAPI("status/exploits")
        global page
        page = 0

        def embed():
            embed = discord.Embed(description="### Executor Status\n**→** ‎ Latest, updated information on every mainstream executor.", color=0x302c34)
            embed.add_field(name=f"{data[page].get('title')}", value=f"* **Free:** {'Yes' if data[page].get('free') is True else 'No'}\n* **Detected:** {'Yes' if data[page].get('detected') is True else 'No'}\n* **Currently Working:** {'Yes' if data[page].get('rbxversion') == pullAPI('versions/current').get('Windows') else 'No'} {'' if data[page].get('rbxversion') == '' else '(' + data[page].get('rbxversion') + ')'}\n* **Discord Invite:** {data[page].get('discordlink')}\n* **Official Webpage:** {data[page].get('websitelink')}")
            embed.set_author(name="View source-code over on GitHub", icon_url="https://www.pinclipart.com/picdir/big/35-354768_circle-clipart.png", url="https://github.com/mr-suno/Exploit-Status")
            embed.set_footer(text=f"Page {page} of {len(data)}")

            return embed

        class ButtonView(discord.ui.View):
            @discord.ui.button(label="⬅️", style=discord.ButtonStyle.secondary)
            async def previous_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
                global page
                page = (page - 1) % len(data)

                await interaction.response.edit_message(embed=embed())

            @discord.ui.button(label="➡️", style=discord.ButtonStyle.primary)
            async def next_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
                global page
                page = (page + 1) % len(data)

                await interaction.response.edit_message(embed=embed())

        if isinstance(CTX, commands.Context):
            await CTX.send(embed=embed(), view=ButtonView())
        elif isinstance(CTX, discord.Interaction):
            await CTX.response.send_message(embed=embed(), view=ButtonView())

    @status.error
    async def status_error(self, CTX: commands.Context, error):
        pass

async def setup(app: commands.Bot) -> None:
    await app.add_cog(user(app))
